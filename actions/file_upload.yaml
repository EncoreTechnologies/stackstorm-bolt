---
description: >
  Upload local file <src> to <dest> on each node

  Examples:
  upload a file to a Windows host via WinRM, providing for the password
  bolt file upload /tmp/source /etc/profile.d/login.sh -n winrm://winhost -u Administrator -p
  upload a file to the local machine, a Linux host via SSH, and hosts from a group specified in an inventory file
  bolt file upload /tmp/source /etc/profile.d/login.sh -n localhost,nixhost,node_group
  upload a file to Windows hosts queried from PuppetDB via WinRM as a domain user, prompting for the password
  bolt file upload /tmp/source /etc/profile.d/login.sh -q 'inventory[certname] { facts.os.family = "windows" }' --transport winrm -u 'domain\Administrator' -p

enabled: true
name: file_upload
pack: bolt
runner_type: python-script
entry_point: lib/bolt.py
parameters:
  sub_command:
    type: string
    immutable: true
    default: "file upload"
  src:
    type: string
    description: "Source path on the local host"
    required: true
  dest:
    type: string
    description: "Destination path on the remote hosts"
    required: true
  ### Begin common environment
  cwd:
    type: string
    description: "Current working directory where bolt will be executed"
    default: "{{ config_context.cwd }}"
  env:
    type: object
    description: "Environment variables to override when executing bolt"
    default: "{{ config_context.env }}"
  credentials:
    type: string
    description: "Name of the credentials object to use from the config"
  ### Begin common bolt options
  cmd:
    type: string
    description: "Path to the bolt executable"
    default: "{{ config_context.cmd }}"
  nodes:
    type: string
    description: >
      Identifies the nodes to target.
      Enter a comma-separated list of node URIs or group names.
      Or read a node list from an input file '@<file>' or stdin '-'.
      Example: --nodes localhost,node_group,ssh://nix.com:23,winrm://windows.puppet.com
      URI format is [protocol://]host[:port]
      SSH is the default protocol; may be ssh, winrm, pcp, local
      For Windows nodes, specify the winrm:// protocol if it has not be configured
      For SSH, port defaults to '22'
      For WinRM, port defaults to '5985' or '5986' based on the --[no-]ssl setting
      For local, use 'local://localhost'
  query:
    type: string
    description: "Query PuppetDB to determine the targets"
  noop:
    type: boolean
    description: "Execute a task that supports it in noop mode"
  description:
    type: string
    description: "Description to use for the job"
  params:
    type: string
    description: "Parameters to a task or plan as json, a json file '@<file>', or on stdin '-'"
  params_obj:
    type: object
    description: "Parameters object that will be translated into JSON. This is used if and only if `params` is NOT specified."
  user:
    type: string
    description: "User to authenticate as"
  password:
    type: string
    description: "Password to authenticate with. Omit the value to prompt for the password."
    secret: true
  private_key:
    type: string
    description: "Private ssh key to authenticate with"
  host_key_check:
    type: boolean
    description: "Check host keys with SSH"
    default: "{{ config_context.host_key_check }}"
  ssl:
    type: boolean
    description: "Use SSL with WinRM"
    default: "{{ config_context.ssl }}"
  ssl_verify:
    type: boolean
    description: "Verify remote host SSL certificate with WinRM"
    default: "{{ config_context.ssl_verify }}"
  run_as:
    type: string
    description: "User to run as using privilege escalation"
  sudo_password:
    type: string
    description: "Password for privilege escalation. Omit the value to prompt for the password."
    secret: true
  concurrency:
    type: integer
    description: "Maximum number of simultaneous connections (default: 100)"
    default: "{{ config_context.concurrency }}"
  compile_concurrency:
    type: integer
    description: "Maximum number of simultaneous manifest block compiles (default: number of cores)"
    default: "{{ config_context.compile_concurrency }}"
  modulepath:
    type: string
    description: "List of directories containing modules, separated by ':'"
    default: "{{ config_context.modulepath }}"
  boltdir:
    type: string
    description: "Specify what Boltdir to load config from (default: autodiscovered from current working dir)"
    default: "{{ config_context.boltdir }}"
  configfile:
    type: string
    description: "Specify where to load config from (default: ~/.puppetlabs/bolt/bolt.yaml)"
    default: "{{ config_context.configfile }}"
  inventoryfile:
    type: string
    description: "Specify where to load inventory from (default: ~/.puppetlabs/bolt/inventory.yaml)"
    default: "{{ config_context.inventoryfile }}"
  transport:
    type: string
    description: "Specify a default transport: ssh, winrm, pcp, local"
    default: "{{ config_context.transport }}"
  connect_timeout:
    type: integer
    description: "Connection timeout (defaults vary)"
    default: "{{ config_context.connect_timeout }}"
  tty:
    type: boolean
    description: "Request a pseudo TTY on nodes that support it"
    default: "{{ config_context.tty }}"
  tmpdir:
    type: string
    description: "The directory to upload and execute temporary files on the target"
    default: "{{ config_context.tmpdir }}"
  format:
    type: string
    description: "Output format to use: human or json"
    default: "{{ config_context.format }}"
  verbose:
    type: boolean
    description: "Display verbose logging"
    default: "{{ config_context.verbose }}"
  debug_:
    type: boolean
    description: "Display debug logging"
    default: "{{ config_context.debug_ }}"
  trace:
    type: boolean
    description: "Display error stack traces"
    default: "{{ config_context.trace }}"
